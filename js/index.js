(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc version 0.6.9.5
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_23) {
        return function (_24) {
            return 0;
        };
    });
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var $$const = function (a) {
        return function (_19) {
            return a;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _274 = compare(__dict_Ord_13)(a1)(a2);
                if (_274 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _275 = compare(__dict_Ord_14)(a1)(a2);
                if (_275 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _276 = compare(__dict_Ord_15)(a1)(a2);
                if (_276 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        unit: unit, 
        "<>": $less$greater, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        compare: compare, 
        negate: negate, 
        "-": $minus, 
        "/": $div, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<$>": $less$dollar$greater, 
        show: show, 
        "$": $dollar, 
        "const": $$const, 
        flip: flip, 
        otherwise: otherwise, 
        showNumber: showNumber, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    var cos = Math.cos;;
    var sin = Math.sin;;
    var pi      = Math.PI;;
    return {
        pi: pi, 
        sin: sin, 
        cos: cos, 
        abs: abs
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    return {
        runFn3: runFn3
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    return {
        Alt: Alt
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    return {
        Alternative: Alternative
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_49) {
        return function (_50) {
            if (_50) {
                return Prelude["return"](__dict_MonadPlus_49["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_50) {
                return Control_Plus.empty((__dict_MonadPlus_49["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    return {
        Nothing: Nothing, 
        Just: Just
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    var $dot$dot = range;
    var singleton = function (a) {
        return [ a ];
    };
    var functorArray = new Prelude.Functor(map);
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        range: range, 
        concatMap: concatMap, 
        append: append, 
        map: map, 
        singleton: singleton, 
        "..": $dot$dot, 
        functorArray: functorArray, 
        applyArray: applyArray, 
        applicativeArray: applicativeArray, 
        bindArray: bindArray, 
        monadArray: monadArray, 
        altArray: altArray, 
        plusArray: plusArray, 
        alternativeArray: alternativeArray, 
        monadPlusArray: monadPlusArray
    };
})();
var PS = PS || {};
PS.Graphics_Canvas = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function getCanvasElementByIdImpl(id, Just, Nothing) {
    return function() {
      var el = document.getElementById(id);
      if (el && el instanceof HTMLCanvasElement) {
        return Just(el);
      } else {
        return Nothing;
      }
    };
  };
    function getContext2D(c) {  return function() {    return c.getContext('2d');  };};
    function setFillStyle(style) {  return function(ctx) {    return function() {      ctx.fillStyle = style;      return ctx;    };  };};
    function beginPath(ctx) {  return function() {    ctx.beginPath();    return ctx;  };};
    function fill(ctx) {  return function() {    ctx.fill();    return ctx;  };};
    function lineTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.lineTo(x, y);        return ctx;      };    };  };};
    function moveTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.moveTo(x, y);        return ctx;      };    };  };};
    function closePath(ctx) {  return function() {    ctx.closePath();    return ctx;  };};
    function clearRect(ctx) {  return function(r) {    return function() {      ctx.clearRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    var getCanvasElementById = function (elId) {
        return getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
    return {
        clearRect: clearRect, 
        closePath: closePath, 
        moveTo: moveTo, 
        lineTo: lineTo, 
        fill: fill, 
        beginPath: beginPath, 
        setFillStyle: setFillStyle, 
        getContext2D: getContext2D, 
        getCanvasElementById: getCanvasElementById
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Data_Array = PS.Data_Array;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Debug_Trace = PS.Debug_Trace;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function fortyFps(f) {  return function() {    window.setInterval(function() {      f(new Date().getTime() / 1000.0)();    }, 25);  };};
    var Front = (function () {
        function Front() {

        };
        Front.value = new Front();
        return Front;
    })();
    var Back = (function () {
        function Back() {

        };
        Back.value = new Back();
        return Back;
    })();
    var Split = (function () {
        function Split(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Split.create = function (value0) {
            return function (value1) {
                return new Split(value0, value1);
            };
        };
        return Split;
    })();
    var XY = (function () {
        function XY(value0) {
            this.value0 = value0;
        };
        XY.create = function (value0) {
            return new XY(value0);
        };
        return XY;
    })();
    var YZ = (function () {
        function YZ(value0) {
            this.value0 = value0;
        };
        YZ.create = function (value0) {
            return new YZ(value0);
        };
        return YZ;
    })();
    var ZX = (function () {
        function ZX(value0) {
            this.value0 = value0;
        };
        ZX.create = function (value0) {
            return new ZX(value0);
        };
        return ZX;
    })();
    var toPoints = function (_265) {
        if (_265 instanceof XY) {
            return [ {
                x: _265.value0.x.min, 
                y: _265.value0.y.min, 
                z: _265.value0.z
            }, {
                x: _265.value0.x.min, 
                y: _265.value0.y.max, 
                z: _265.value0.z
            }, {
                x: _265.value0.x.max, 
                y: _265.value0.y.max, 
                z: _265.value0.z
            }, {
                x: _265.value0.x.max, 
                y: _265.value0.y.min, 
                z: _265.value0.z
            } ];
        };
        if (_265 instanceof YZ) {
            return [ {
                x: _265.value0.x, 
                y: _265.value0.y.min, 
                z: _265.value0.z.min
            }, {
                x: _265.value0.x, 
                y: _265.value0.y.min, 
                z: _265.value0.z.max
            }, {
                x: _265.value0.x, 
                y: _265.value0.y.max, 
                z: _265.value0.z.max
            }, {
                x: _265.value0.x, 
                y: _265.value0.y.max, 
                z: _265.value0.z.min
            } ];
        };
        if (_265 instanceof ZX) {
            return [ {
                x: _265.value0.x.min, 
                y: _265.value0.y, 
                z: _265.value0.z.min
            }, {
                x: _265.value0.x.min, 
                y: _265.value0.y, 
                z: _265.value0.z.max
            }, {
                x: _265.value0.x.max, 
                y: _265.value0.y, 
                z: _265.value0.z.max
            }, {
                x: _265.value0.x.max, 
                y: _265.value0.y, 
                z: _265.value0.z.min
            } ];
        };
        throw new Error("Failed pattern match");
    };
    var functorSplit = new Prelude.Functor(function (f) {
        return function (_266) {
            if (_266 instanceof Front) {
                return Front.value;
            };
            if (_266 instanceof Back) {
                return Back.value;
            };
            if (_266 instanceof Split) {
                return new Split(f(_266.value0), f(_266.value1));
            };
            throw new Error("Failed pattern match");
        };
    });
    var cube = function (x0) {
        return function (x1) {
            return function (y0) {
                return function (y1) {
                    return function (z0) {
                        return function (z1) {
                            return function (a) {
                                return [ new XY({
                                    x: {
                                        min: x0, 
                                        max: x1
                                    }, 
                                    y: {
                                        min: y0, 
                                        max: y1
                                    }, 
                                    z: z0, 
                                    a: a
                                }), new XY({
                                    x: {
                                        min: x0, 
                                        max: x1
                                    }, 
                                    y: {
                                        min: y0, 
                                        max: y1
                                    }, 
                                    z: z1, 
                                    a: a
                                }), new YZ({
                                    x: x0, 
                                    y: {
                                        min: y0, 
                                        max: y1
                                    }, 
                                    z: {
                                        min: z0, 
                                        max: z1
                                    }, 
                                    a: a
                                }), new YZ({
                                    x: x1, 
                                    y: {
                                        min: y0, 
                                        max: y1
                                    }, 
                                    z: {
                                        min: z0, 
                                        max: z1
                                    }, 
                                    a: a
                                }), new ZX({
                                    x: {
                                        min: x0, 
                                        max: x1
                                    }, 
                                    y: y0, 
                                    z: {
                                        min: z0, 
                                        max: z1
                                    }, 
                                    a: a
                                }), new ZX({
                                    x: {
                                        min: x0, 
                                        max: x1
                                    }, 
                                    y: y1, 
                                    z: {
                                        min: z0, 
                                        max: z1
                                    }, 
                                    a: a
                                }) ];
                            };
                        };
                    };
                };
            };
        };
    };
    var scene = function (t) {
        var s = $$Math.sin(0.25 * t) * 8.0 + 40.0;
        return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](-3)(3))(function (_16) {
            return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](-3)(3))(function (_15) {
                return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](-3)(3))(function (_14) {
                    var r = $$Math.abs(_16) + $$Math.abs(_15) + $$Math.abs(_14);
                    var alpha = $$Math.sin(_16 + t * 2.1) + $$Math.sin(_15 + t * 2.2) + $$Math.cos(_14 + t * 2.3) + r / 7.5;
                    return Prelude[">>="](Data_Array.bindArray)(Control_MonadPlus.guard(Data_Array.monadPlusArray)(alpha > 0.5))(function () {
                        return cube(_16 * s)(_16 * s + s)(_15 * s)(_15 * s + s)(_14 * s)(_14 * s + s)(alpha);
                    });
                });
            });
        });
    };
    var backToFront = function (f) {
        var splitZ = function (o) {
            return function (z) {
                if (o.z.min >= z) {
                    return Back.value;
                };
                if (o.z.max <= z) {
                    return Front.value;
                };
                if (Prelude.otherwise) {
                    return new Split((function () {
                        var _293 = {};
                        for (var _294 in o) {
                            if (o.hasOwnProperty(_294)) {
                                _293[_294] = o[_294];
                            };
                        };
                        _293.z = {
                            min: o.z.min, 
                            max: z
                        };
                        return _293;
                    })(), (function () {
                        var _295 = {};
                        for (var _296 in o) {
                            if (o.hasOwnProperty(_296)) {
                                _295[_296] = o[_296];
                            };
                        };
                        _295.z = {
                            max: o.z.max, 
                            min: z
                        };
                        return _295;
                    })());
                };
                throw new Error("Failed pattern match");
            };
        };
        var splitY = function (o) {
            return function (y) {
                if (o.y.min >= y) {
                    return Front.value;
                };
                if (o.y.max <= y) {
                    return Back.value;
                };
                if (Prelude.otherwise) {
                    return new Split((function () {
                        var _299 = {};
                        for (var _300 in o) {
                            if (o.hasOwnProperty(_300)) {
                                _299[_300] = o[_300];
                            };
                        };
                        _299.y = {
                            max: o.y.max, 
                            min: y
                        };
                        return _299;
                    })(), (function () {
                        var _301 = {};
                        for (var _302 in o) {
                            if (o.hasOwnProperty(_302)) {
                                _301[_302] = o[_302];
                            };
                        };
                        _301.y = {
                            min: o.y.min, 
                            max: y
                        };
                        return _301;
                    })());
                };
                throw new Error("Failed pattern match");
            };
        };
        var splitX = function (o) {
            return function (x) {
                if (o.x.min >= x) {
                    return Front.value;
                };
                if (o.x.max <= x) {
                    return Back.value;
                };
                if (Prelude.otherwise) {
                    return new Split((function () {
                        var _305 = {};
                        for (var _306 in o) {
                            if (o.hasOwnProperty(_306)) {
                                _305[_306] = o[_306];
                            };
                        };
                        _305.x = {
                            max: o.x.max, 
                            min: x
                        };
                        return _305;
                    })(), (function () {
                        var _307 = {};
                        for (var _308 in o) {
                            if (o.hasOwnProperty(_308)) {
                                _307[_308] = o[_308];
                            };
                        };
                        _307.x = {
                            min: o.x.min, 
                            max: x
                        };
                        return _307;
                    })());
                };
                throw new Error("Failed pattern match");
            };
        };
        var splitOn = function (_268) {
            return function (_269) {
                if (_268 instanceof XY && _269 instanceof XY) {
                    if (_268.value0.z >= _269.value0.z) {
                        return Back.value;
                    };
                    if (Prelude.otherwise) {
                        return Front.value;
                    };
                };
                if (_268 instanceof XY && _269 instanceof YZ) {
                    return Prelude["<$>"](functorSplit)(XY.create)(splitX(_268.value0)(_269.value0.x));
                };
                if (_268 instanceof XY && _269 instanceof ZX) {
                    return Prelude["<$>"](functorSplit)(XY.create)(splitY(_268.value0)(_269.value0.y));
                };
                if (_268 instanceof YZ && _269 instanceof XY) {
                    return Prelude["<$>"](functorSplit)(YZ.create)(splitZ(_268.value0)(_269.value0.z));
                };
                if (_268 instanceof YZ && _269 instanceof YZ) {
                    if (_268.value0.x >= _269.value0.x) {
                        return Front.value;
                    };
                    if (Prelude.otherwise) {
                        return Back.value;
                    };
                };
                if (_268 instanceof YZ && _269 instanceof ZX) {
                    return Prelude["<$>"](functorSplit)(YZ.create)(splitY(_268.value0)(_269.value0.y));
                };
                if (_268 instanceof ZX && _269 instanceof XY) {
                    return Prelude["<$>"](functorSplit)(ZX.create)(splitZ(_268.value0)(_269.value0.z));
                };
                if (_268 instanceof ZX && _269 instanceof YZ) {
                    return Prelude["<$>"](functorSplit)(ZX.create)(splitX(_268.value0)(_269.value0.x));
                };
                if (_268 instanceof ZX && _269 instanceof ZX) {
                    if (_268.value0.y >= _269.value0.y) {
                        return Front.value;
                    };
                    if (Prelude.otherwise) {
                        return Back.value;
                    };
                };
                throw new Error("Failed pattern match");
            };
        };
        var go = function (_267) {
            if (_267.length === 0) {
                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
            };
            if (_267.length >= 1) {
                var _339 = _267.slice(1);
                return function __do() {
                    go(Prelude[">>="](Data_Array.bindArray)(_339)(function (_12) {
                        var _331 = splitOn(_12)(_267[0]);
                        if (_331 instanceof Back) {
                            return [ _12 ];
                        };
                        if (_331 instanceof Split) {
                            return [ _331.value1 ];
                        };
                        return [  ];
                    }))();
                    f(_267[0])();
                    return go(Prelude[">>="](Data_Array.bindArray)(_339)(function (_13) {
                        var _335 = splitOn(_13)(_267[0]);
                        if (_335 instanceof Front) {
                            return [ _13 ];
                        };
                        if (_335 instanceof Split) {
                            return [ _335.value0 ];
                        };
                        return [  ];
                    }))();
                };
            };
            throw new Error("Failed pattern match");
        };
        return go;
    };
    var main = (function () {
        var render = function (ctx) {
            return function (t) {
                return function (r) {
                    var theta = $$Math.pi / 4 + ($$Math.pi / 12) * $$Math.sin(t * 0.11000000000000001);
                    var s = $$Math.sin(theta);
                    var c = $$Math.cos(theta);
                    var project = function (o) {
                        return {
                            x: (500.0 + o.x * c) - o.y * s, 
                            y: 350.0 + o.x * s + o.y * c + o.z
                        };
                    };
                    var l2 = function (ctx_1) {
                        return function (f) {
                            return function (p) {
                                var _340 = project(p);
                                return f(ctx_1)(_340.x)(_340.y);
                            };
                        };
                    };
                    return function __do() {
                        (function () {
                            if (r instanceof XY) {
                                return Graphics_Canvas.setFillStyle("rgba(48, 196, 255, " + (Prelude.show(Prelude.showNumber)(r.value0.a) + ")"))(ctx);
                            };
                            if (r instanceof YZ) {
                                return Graphics_Canvas.setFillStyle("rgba(24, 144, 200, " + (Prelude.show(Prelude.showNumber)(r.value0.a) + ")"))(ctx);
                            };
                            if (r instanceof ZX) {
                                return Graphics_Canvas.setFillStyle("rgba(0 , 128, 196, " + (Prelude.show(Prelude.showNumber)(r.value0.a) + ")"))(ctx);
                            };
                            throw new Error("Failed pattern match");
                        })()();
                        var _345 = toPoints(r);
                        if (_345.length === 4) {
                            return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                                Graphics_Canvas.beginPath(ctx)();
                                l2(ctx)(Graphics_Canvas.moveTo)(_345[0])();
                                l2(ctx)(Graphics_Canvas.lineTo)(_345[1])();
                                l2(ctx)(Graphics_Canvas.lineTo)(_345[2])();
                                l2(ctx)(Graphics_Canvas.lineTo)(_345[3])();
                                Graphics_Canvas.closePath(ctx)();
                                return Graphics_Canvas.fill(ctx)();
                            })();
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return function __do() {
            var _18 = Graphics_Canvas.getCanvasElementById("canvas")();
            if (_18 instanceof Data_Maybe.Just) {
                var _17 = Graphics_Canvas.getContext2D(_18.value0)();
                return fortyFps(function (t) {
                    return function __do() {
                        Graphics_Canvas.clearRect(_17)({
                            x: 0, 
                            y: 0, 
                            w: 1000, 
                            h: 1000
                        })();
                        return backToFront(render(_17)(t))(scene(t))();
                    };
                })();
            };
            throw new Error("Failed pattern match");
        };
    })();
    return {
        Front: Front, 
        Back: Back, 
        Split: Split, 
        XY: XY, 
        YZ: YZ, 
        ZX: ZX, 
        main: main, 
        fortyFps: fortyFps, 
        scene: scene, 
        cube: cube, 
        toPoints: toPoints, 
        backToFront: backToFront, 
        functorSplit: functorSplit
    };
})();
PS.Main.main();


},{}]},{},[1]);
