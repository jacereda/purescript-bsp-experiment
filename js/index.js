(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    Alt: Alt, 
    "<|>": $less$bar$greater
};

},{"Prelude":27}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_37) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":1,"Control.Lazy":6,"Control.Plus":9,"Prelude":27}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var $less$times = function (__dict_Apply_0) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_0)(Prelude["<$>"](__dict_Apply_0["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};
var $times$greater = function (__dict_Apply_1) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
        };
    };
};
var lift5 = function (__dict_Apply_2) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<$>"](__dict_Apply_2["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var lift4 = function (__dict_Apply_3) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<$>"](__dict_Apply_3["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift3 = function (__dict_Apply_4) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](__dict_Apply_4)(Prelude["<*>"](__dict_Apply_4)(Prelude["<$>"](__dict_Apply_4["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift2 = function (__dict_Apply_5) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
module.exports = {
    lift5: lift5, 
    lift4: lift4, 
    lift3: lift3, 
    lift2: lift2, 
    "*>": $times$greater, 
    "<*": $less$times
};

},{"Prelude":27}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Control.Extend":5,"Prelude":27}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Extend = function ($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$less$eq = function (dict) {
    return dict["<<="];
};
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};
var extend = function (__dict_Extend_4) {
    return $less$less$eq(__dict_Extend_4);
};
var duplicate = function (__dict_Extend_5) {
    return function (w) {
        return $less$less$eq(__dict_Extend_5)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    Extend: Extend, 
    duplicate: duplicate, 
    extend: extend, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    "<<=": $less$less$eq, 
    extendArr: extendArr
};

},{"Prelude":27}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Lazy = function (defer) {
    this.defer = defer;
};
var Lazy1 = function (defer1) {
    this.defer1 = defer1;
};
var Lazy2 = function (defer2) {
    this.defer2 = defer2;
};
var defer2 = function (dict) {
    return dict.defer2;
};
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_36) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};
var defer1 = function (dict) {
    return dict.defer1;
};
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_35) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_34) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy2: Lazy2, 
    Lazy1: Lazy1, 
    Lazy: Lazy, 
    fix2: fix2, 
    fix1: fix1, 
    fix: fix, 
    defer2: defer2, 
    defer1: defer1, 
    defer: defer
};

},{"Prelude":27}],7:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;

    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;

    function runPure(f) {
      return f();
    }
    ;

    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;

    function whileE(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
          return {};
        };
      };
    }
    ;

    function forE(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    }
    ;

    function foreachE(as) {
      return function(f) {
        return function() {
          for (var i = 0; i < as.length; i++) {
            f(as[i])();
          }
        };
      };
    }
    ;
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    foreachE: foreachE, 
    forE: forE, 
    whileE: whileE, 
    untilE: untilE, 
    runPure: runPure, 
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff
};

},{"Prelude":27}],8:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var guard = function (__dict_MonadPlus_0) {
    return function (_38) {
        if (_38) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_38) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Alternative":2,"Control.Plus":9,"Prelude":27}],9:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Control.Alt":1,"Prelude":27}],10:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Prelude_Unsafe = require("Prelude.Unsafe");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};

function replicate(nn) {
  return function(v) {
    var n = nn > 0? nn : 0;
    var r = new Array(n);
    for (var i = 0; i < n; i++)
      r[i] = v;
    return r;
   };
}
;
var $dot$dot = range;
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return n_1 !== ~~n_1;
        };
        var _384 = n < 0 || (n >= length(xs) || isInt(n));
        if (_384) {
            return Data_Maybe.Nothing.value;
        };
        if (!_384) {
            return new Data_Maybe.Just(xs[n]);
        };
        throw new Error("Failed pattern match");
    };
};
var take = function (n) {
    return slice(0)(n);
};
var tail = function (_65) {
    if (_65.length >= 1) {
        var _387 = _65.slice(1);
        return new Data_Maybe.Just(_387);
    };
    return Data_Maybe.Nothing.value;
};
var span = (function () {
    var go = function (__copy_acc) {
        return function (__copy_p) {
            return function (__copy__75) {
                var acc = __copy_acc;
                var p = __copy_p;
                var _75 = __copy__75;
                tco: while (true) {
                    if (_75.length >= 1) {
                        var _392 = _75.slice(1);
                        if (p(_75[0])) {
                            var __tco_acc = Prelude[":"](_75[0])(acc);
                            var __tco_p = p;
                            acc = __tco_acc;
                            p = __tco_p;
                            _75 = _392;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(acc), 
                        rest: _75
                    };
                };
            };
        };
    };
    return go([  ]);
})();
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _393 = comp(x)(y);
                if (_393 instanceof Prelude.GT) {
                    return 1;
                };
                if (_393 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_393 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);
var $$null = function (_67) {
    if (_67.length === 0) {
        return true;
    };
    return false;
};
var nubBy = function ($eq$eq) {
    return function (_71) {
        if (_71.length === 0) {
            return [  ];
        };
        if (_71.length >= 1) {
            var _398 = _71.slice(1);
            return Prelude[":"](_71[0])(nubBy($eq$eq)(filter(function (y) {
                return !$eq$eq(_71[0])(y);
            })(_398)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var _399 = $bang$bang(xs)(i);
            if (_399 instanceof Data_Maybe.Just) {
                return updateAt(i)(f(_399.value0))(xs);
            };
            if (_399 instanceof Data_Maybe.Nothing) {
                return xs;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};
var last = function (xs) {
    return $bang$bang(xs)(length(xs) - 1);
};
var intersectBy = function (eq) {
    return function (_69) {
        return function (_70) {
            if (_69.length === 0) {
                return [  ];
            };
            if (_70.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return findIndex(eq(x))(_70) >= 0;
            };
            return filter(el)(_69);
        };
    };
};
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};
var init = function (_66) {
    if (_66.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(length(_66) - 1)(_66));
};
var head = function (xs) {
    return $bang$bang(xs)(0);
};
var groupBy = (function () {
    var go = function (__copy_acc) {
        return function (__copy_op) {
            return function (__copy__74) {
                var acc = __copy_acc;
                var op = __copy_op;
                var _74 = __copy__74;
                tco: while (true) {
                    if (_74.length === 0) {
                        return reverse(acc);
                    };
                    if (_74.length >= 1) {
                        var _409 = _74.slice(1);
                        var sp = span(op(_74[0]))(_409);
                        var __tco_acc = Prelude[":"](Prelude[":"](_74[0])(sp.init))(acc);
                        var __tco_op = op;
                        acc = __tco_acc;
                        op = __tco_op;
                        _74 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (_68) {
            if (_68.length === 0) {
                return [  ];
            };
            var _413 = findIndex(eq(x))(_68);
            if (_413 < 0) {
                return _68;
            };
            return deleteAt(_413)(1)(_68);
        };
    };
};
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__72) {
                return function (__copy__73) {
                    var _72 = __copy__72;
                    var _73 = __copy__73;
                    tco: while (true) {
                        if (_73.length === 0) {
                            return _72;
                        };
                        if (_72.length === 0) {
                            return [  ];
                        };
                        if (_73.length >= 1) {
                            var _417 = _73.slice(1);
                            var __tco__72 = $$delete(__dict_Eq_8)(_73[0])(_72);
                            _72 = __tco__72;
                            _73 = _417;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    replicate: replicate, 
    takeWhile: takeWhile, 
    dropWhile: dropWhile, 
    span: span, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    sortBy: sortBy, 
    sort: sort, 
    nubBy: nubBy, 
    nub: nub, 
    zipWith: zipWith, 
    range: range, 
    filter: filter, 
    concatMap: concatMap, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    "\\\\": $bslash$bslash, 
    "delete": $$delete, 
    deleteBy: deleteBy, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    take: take, 
    drop: drop, 
    reverse: reverse, 
    concat: concat, 
    append: append, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    length: length, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    map: map, 
    "null": $$null, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    singleton: singleton, 
    snoc: snoc, 
    "..": $dot$dot, 
    "!!": $bang$bang, 
    functorArray: functorArray, 
    applyArray: applyArray, 
    applicativeArray: applicativeArray, 
    bindArray: bindArray, 
    monadArray: monadArray, 
    semigroupArray: semigroupArray, 
    altArray: altArray, 
    plusArray: plusArray, 
    alternativeArray: alternativeArray, 
    monadPlusArray: monadPlusArray
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.MonadPlus":8,"Control.Plus":9,"Data.Maybe":14,"Prelude":27,"Prelude.Unsafe":26}],11:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_45) {
            if (_45 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_45.value0) + ")");
            };
            if (_45 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_45.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (f) {
    return function (_41) {
        if (_41 instanceof Left) {
            return new Left(_41.value0);
        };
        if (_41 instanceof Right) {
            return new Right(f(_41.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var extendEither = new Control_Extend.Extend(function (f) {
    return function (_44) {
        if (_44 instanceof Left) {
            return new Left(_44.value0);
        };
        return new Right(f(_44));
    };
}, function () {
    return functorEither;
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_46) {
            return function (_47) {
                if (_46 instanceof Left && _47 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_46.value0)(_47.value0);
                };
                if (_46 instanceof Right && _47 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_46.value0)(_47.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_48) {
            return function (_49) {
                if (_48 instanceof Left && _49 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_48.value0)(_49.value0);
                };
                if (_48 instanceof Right && _49 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_48.value0)(_49.value0);
                };
                if (_48 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_49 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (f) {
    return function (g) {
        return function (_40) {
            if (_40 instanceof Left) {
                return f(_40.value0);
            };
            if (_40 instanceof Right) {
                return g(_40.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_42) {
    return function (r) {
        if (_42 instanceof Left) {
            return new Left(_42.value0);
        };
        if (_42 instanceof Right) {
            return Prelude["<$>"](functorEither)(_42.value0)(r);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_39) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_43) {
    return function (r) {
        if (_43 instanceof Left) {
            return r;
        };
        return _43;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither
};

},{"Control.Alt":1,"Control.Extend":5,"Prelude":27}],12:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Apply = require("Control.Apply");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Last = require("Data.Monoid.Last");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var Data_Tuple = require("Data.Tuple");

  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;

  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_228) {
                    return function (x) {
                        if (_228.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_228.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};
var or = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["||"](Prelude.boolLikeBoolean))(false);
};
var product = function (__dict_Foldable_11) {
    return foldl(__dict_Foldable_11)(Prelude["*"](Prelude.semiringNumber))(1);
};
var sum = function (__dict_Foldable_12) {
    return foldl(__dict_Foldable_12)(Prelude["+"](Prelude.semiringNumber))(0);
};
var foldableTuple = new Foldable(function (__dict_Monoid_13) {
    return function (f) {
        return function (_212) {
            return f(_212.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_211) {
            return f(z)(_211.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_210) {
            return f(_210.value1)(z);
        };
    };
});
var foldableMultiplicative = new Foldable(function (__dict_Monoid_14) {
    return function (f) {
        return function (_227) {
            return f(_227);
        };
    };
}, function (f) {
    return function (z) {
        return function (_226) {
            return f(z)(_226);
        };
    };
}, function (f) {
    return function (z) {
        return function (_225) {
            return f(_225)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
    return function (f) {
        return function (_209) {
            if (_209 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_209 instanceof Data_Maybe.Just) {
                return f(_209.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_208) {
            if (_208 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_208 instanceof Data_Maybe.Just) {
                return f(z)(_208.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_207) {
            if (_207 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_207 instanceof Data_Maybe.Just) {
                return f(_207.value0)(z);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableEither = new Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (_206) {
            if (_206 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_206 instanceof Data_Either.Right) {
                return f(_206.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_205) {
            if (_205 instanceof Data_Either.Left) {
                return z;
            };
            if (_205 instanceof Data_Either.Right) {
                return f(z)(_205.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_204) {
            if (_204 instanceof Data_Either.Left) {
                return z;
            };
            if (_204 instanceof Data_Either.Right) {
                return f(_204.value0)(z);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableDual = new Foldable(function (__dict_Monoid_17) {
    return function (f) {
        return function (_218) {
            return f(_218);
        };
    };
}, function (f) {
    return function (z) {
        return function (_217) {
            return f(z)(_217);
        };
    };
}, function (f) {
    return function (z) {
        return function (_216) {
            return f(_216)(z);
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_18) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_18["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_18))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldlArray(f)(z)(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldrArray(f)(z)(xs);
        };
    };
});
var foldableAdditive = new Foldable(function (__dict_Monoid_19) {
    return function (f) {
        return function (_215) {
            return f(_215);
        };
    };
}, function (f) {
    return function (z) {
        return function (_214) {
            return f(z)(_214);
        };
    };
}, function (f) {
    return function (z) {
        return function (_213) {
            return f(_213)(z);
        };
    };
});
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (__dict_Monoid_20) {
    return function (f) {
        return function (_221) {
            return foldMap(foldableMaybe)(__dict_Monoid_20)(f)(_221);
        };
    };
}, function (f) {
    return function (z) {
        return function (_220) {
            return foldl(foldableMaybe)(f)(z)(_220);
        };
    };
}, function (f) {
    return function (z) {
        return function (_219) {
            return foldr(foldableMaybe)(f)(z)(_219);
        };
    };
});
var foldableLast = new Foldable(function (__dict_Monoid_21) {
    return function (f) {
        return function (_224) {
            return foldMap(foldableMaybe)(__dict_Monoid_21)(f)(_224);
        };
    };
}, function (f) {
    return function (z) {
        return function (_223) {
            return foldl(foldableMaybe)(f)(z)(_223);
        };
    };
}, function (f) {
    return function (z) {
        return function (_222) {
            return foldr(foldableMaybe)(f)(z)(_222);
        };
    };
});
var lookup = function (__dict_Eq_22) {
    return function (__dict_Foldable_23) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_23)(Data_Monoid_First.monoidFirst)(function (_203) {
                    var _787 = Prelude["=="](__dict_Eq_22)(a)(_203.value0);
                    if (_787) {
                        return new Data_Maybe.Just(_203.value1);
                    };
                    if (!_787) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match");
                })(f));
            };
        };
    };
};
var fold = function (__dict_Foldable_24) {
    return function (__dict_Monoid_25) {
        return foldMap(__dict_Foldable_24)(__dict_Monoid_25)(Prelude.id(Prelude.categoryArr));
    };
};
var find = function (__dict_Foldable_26) {
    return function (p) {
        return function (f) {
            var _791 = foldMap(__dict_Foldable_26)(Data_Monoid.monoidArray)(function (x) {
                var _790 = p(x);
                if (_790) {
                    return [ x ];
                };
                if (!_790) {
                    return [  ];
                };
                throw new Error("Failed pattern match");
            })(f);
            if (_791.length >= 1) {
                var _793 = _791.slice(1);
                return new Data_Maybe.Just(_791[0]);
            };
            if (_791.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var any = function (__dict_Foldable_27) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_27)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
var elem = function (__dict_Eq_28) {
    return function (__dict_Foldable_29) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_29))(Prelude["=="](__dict_Eq_28));
    };
};
var notElem = function (__dict_Eq_30) {
    return function (__dict_Foldable_31) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_30)(__dict_Foldable_31)(x));
        };
    };
};
var and = function (__dict_Foldable_32) {
    return foldl(__dict_Foldable_32)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
};
var all = function (__dict_Foldable_33) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_33)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    foldlArray: foldlArray, 
    foldrArray: foldrArray, 
    lookup: lookup, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    intercalate: intercalate, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableTuple: foldableTuple, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableMultiplicative: foldableMultiplicative
};

},{"Control.Apply":3,"Data.Either":11,"Data.Maybe":14,"Data.Monoid":20,"Data.Monoid.Additive":15,"Data.Monoid.Dual":16,"Data.Monoid.First":17,"Data.Monoid.Last":18,"Data.Monoid.Multiplicative":19,"Data.Tuple":21,"Prelude":27}],13:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function mkFn0(fn) {
      return function() {
        return fn({});
      };
    }
    ;

    function mkFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;

    function mkFn2(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    }
    ;

    function mkFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    }
    ;

    function mkFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    }
    ;

    function mkFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    }
    ;

    function mkFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    }
    ;

    function mkFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    }
    ;

    function mkFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    }
    ;

    function mkFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    }
    ;

    function mkFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    }
    ;

    function runFn0(fn) {
      return fn();
    }
    ;

    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;

    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;

    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;

    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;

    function runFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    }
    ;

    function runFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    runFn10: runFn10, 
    runFn9: runFn9, 
    runFn8: runFn8, 
    runFn7: runFn7, 
    runFn6: runFn6, 
    runFn5: runFn5, 
    runFn4: runFn4, 
    runFn3: runFn3, 
    runFn2: runFn2, 
    runFn1: runFn1, 
    runFn0: runFn0, 
    mkFn10: mkFn10, 
    mkFn9: mkFn9, 
    mkFn8: mkFn8, 
    mkFn7: mkFn7, 
    mkFn6: mkFn6, 
    mkFn5: mkFn5, 
    mkFn4: mkFn4, 
    mkFn3: mkFn3, 
    mkFn2: mkFn2, 
    mkFn1: mkFn1, 
    mkFn0: mkFn0, 
    on: on
};

},{"Prelude":27}],14:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Extend = require("Control.Extend");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_60) {
        if (_60 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_60.value0) + ")");
        };
        if (_60 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_58) {
        return function (_59) {
            if (_58 instanceof Nothing) {
                return _59;
            };
            if (_59 instanceof Nothing) {
                return _58;
            };
            if (_58 instanceof Just && _59 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_58.value0)(_59.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (b) {
    return function (f) {
        return function (_52) {
            if (_52 instanceof Nothing) {
                return b;
            };
            if (_52 instanceof Just) {
                return f(_52.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (fn) {
    return function (_53) {
        if (_53 instanceof Just) {
            return new Just(fn(_53.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (f) {
    return function (_57) {
        if (_57 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(f(_57));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_61) {
        return function (_62) {
            if (_61 instanceof Nothing && _62 instanceof Nothing) {
                return true;
            };
            if (_61 instanceof Just && _62 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_61.value0)(_62.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_63) {
        return function (_64) {
            if (_63 instanceof Just && _64 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_63.value0)(_64.value0);
            };
            if (_63 instanceof Nothing && _64 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_63 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_64 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_54) {
    return function (x) {
        if (_54 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_54.value0)(x);
        };
        if (_54 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_56) {
    return function (k) {
        if (_56 instanceof Just) {
            return k(_56.value0);
        };
        if (_56 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_55) {
    return function (r) {
        if (_55 instanceof Nothing) {
            return r;
        };
        return _55;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    fromMaybe: fromMaybe, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Extend":5,"Control.MonadPlus":8,"Control.Plus":9,"Prelude":27}],15:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Additive = function (x) {
    return x;
};
var showAdditive = function (__dict_Show_0) {
    return new Prelude.Show(function (_89) {
        return "Additive (" + (Prelude.show(__dict_Show_0)(_89) + ")");
    });
};
var semigroupAdditive = function (__dict_Semiring_1) {
    return new Prelude.Semigroup(function (_90) {
        return function (_91) {
            return Prelude["+"](__dict_Semiring_1)(_90)(_91);
        };
    });
};
var runAdditive = function (_78) {
    return _78;
};
var monoidAdditive = function (__dict_Semiring_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(__dict_Semiring_3);
    }, Prelude.zero(__dict_Semiring_3));
};
var functorAdditive = new Prelude.Functor(function (f) {
    return function (_85) {
        return f(_85);
    };
});
var extendAdditive = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorAdditive;
});
var eqAdditive = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_81) {
        return function (_82) {
            return Prelude["/="](__dict_Eq_4)(_81)(_82);
        };
    }, function (_79) {
        return function (_80) {
            return Prelude["=="](__dict_Eq_4)(_79)(_80);
        };
    });
};
var ordAdditive = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqAdditive(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_83) {
        return function (_84) {
            return Prelude.compare(__dict_Ord_2)(_83)(_84);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runAdditive);
var applyAdditive = new Prelude.Apply(function (_86) {
    return function (_87) {
        return _86(_87);
    };
}, function () {
    return functorAdditive;
});
var bindAdditive = new Prelude.Bind(function (_88) {
    return function (f) {
        return f(_88);
    };
}, function () {
    return applyAdditive;
});
var applicativeAdditive = new Prelude.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Prelude.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive, 
    runAdditive: runAdditive, 
    eqAdditive: eqAdditive, 
    ordAdditive: ordAdditive, 
    functorAdditive: functorAdditive, 
    applyAdditive: applyAdditive, 
    applicativeAdditive: applicativeAdditive, 
    bindAdditive: bindAdditive, 
    monadAdditive: monadAdditive, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showAdditive: showAdditive, 
    semigroupAdditive: semigroupAdditive, 
    monoidAdditive: monoidAdditive
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":20,"Prelude":27}],16:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Dual = function (x) {
    return x;
};
var showDual = function (__dict_Show_0) {
    return new Prelude.Show(function (_123) {
        return "Dual (" + (Prelude.show(__dict_Show_0)(_123) + ")");
    });
};
var semigroupDual = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_124) {
        return function (_125) {
            return Prelude["<>"](__dict_Semigroup_1)(_125)(_124);
        };
    });
};
var runDual = function (_112) {
    return _112;
};
var monoidDual = function (__dict_Monoid_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_3));
};
var functorDual = new Prelude.Functor(function (f) {
    return function (_119) {
        return f(_119);
    };
});
var extendDual = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorDual;
});
var eqDual = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_115) {
        return function (_116) {
            return Prelude["/="](__dict_Eq_4)(_115)(_116);
        };
    }, function (_113) {
        return function (_114) {
            return Prelude["=="](__dict_Eq_4)(_113)(_114);
        };
    });
};
var ordDual = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqDual(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_117) {
        return function (_118) {
            return Prelude.compare(__dict_Ord_2)(_117)(_118);
        };
    });
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, runDual);
var applyDual = new Prelude.Apply(function (_120) {
    return function (_121) {
        return _120(_121);
    };
}, function () {
    return functorDual;
});
var bindDual = new Prelude.Bind(function (_122) {
    return function (f) {
        return f(_122);
    };
}, function () {
    return applyDual;
});
var applicativeDual = new Prelude.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Prelude.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    runDual: runDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    functorDual: functorDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":20,"Prelude":27}],17:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = function (x) {
    return x;
};
var showFirst = function (__dict_Show_0) {
    return new Prelude.Show(function (_188) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_188) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (_189) {
    return function (second) {
        if (_189 instanceof Data_Maybe.Just) {
            return _189;
        };
        return second;
    };
});
var runFirst = function (_177) {
    return _177;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var functorFirst = new Prelude.Functor(function (f) {
    return function (_184) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_184);
    };
});
var extendFirst = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendFirst)(f)(x);
    };
}, function () {
    return functorFirst;
});
var eqFirst = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_180) {
        return function (_181) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_180)(_181);
        };
    }, function (_178) {
        return function (_179) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_178)(_179);
        };
    });
};
var ordFirst = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqFirst(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_182) {
        return function (_183) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_182)(_183);
        };
    });
};
var applyFirst = new Prelude.Apply(function (_185) {
    return function (_186) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_185)(_186);
    };
}, function () {
    return functorFirst;
});
var bindFirst = new Prelude.Bind(function (_187) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_187)(Prelude["<<<"](Prelude.semigroupoidArr)(runFirst)(f));
    };
}, function () {
    return applyFirst;
});
var applicativeFirst = new Prelude.Applicative(function () {
    return applyFirst;
}, Prelude["<<<"](Prelude.semigroupoidArr)(First)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadFirst = new Prelude.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First, 
    runFirst: runFirst, 
    eqFirst: eqFirst, 
    ordFirst: ordFirst, 
    functorFirst: functorFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Maybe":14,"Data.Monoid":20,"Prelude":27}],18:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Last = function (x) {
    return x;
};
var showLast = function (__dict_Show_0) {
    return new Prelude.Show(function (_201) {
        return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_201) + ")");
    });
};
var semigroupLast = new Prelude.Semigroup(function (last) {
    return function (_202) {
        if (_202 instanceof Data_Maybe.Just) {
            return _202;
        };
        if (_202 instanceof Data_Maybe.Nothing) {
            return last;
        };
        throw new Error("Failed pattern match");
    };
});
var runLast = function (_190) {
    return _190;
};
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var functorLast = new Prelude.Functor(function (f) {
    return function (_197) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_197);
    };
});
var extendLast = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendLast)(f)(x);
    };
}, function () {
    return functorLast;
});
var eqLast = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_193) {
        return function (_194) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_193)(_194);
        };
    }, function (_191) {
        return function (_192) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_191)(_192);
        };
    });
};
var ordLast = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqLast(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_195) {
        return function (_196) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_195)(_196);
        };
    });
};
var applyLast = new Prelude.Apply(function (_198) {
    return function (_199) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_198)(_199);
    };
}, function () {
    return functorLast;
});
var bindLast = new Prelude.Bind(function (_200) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_200)(Prelude["<<<"](Prelude.semigroupoidArr)(runLast)(f));
    };
}, function () {
    return applyLast;
});
var applicativeLast = new Prelude.Applicative(function () {
    return applyLast;
}, Prelude["<<<"](Prelude.semigroupoidArr)(Last)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadLast = new Prelude.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last, 
    runLast: runLast, 
    eqLast: eqLast, 
    ordLast: ordLast, 
    functorLast: functorLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Maybe":14,"Data.Monoid":20,"Prelude":27}],19:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (__dict_Show_0) {
    return new Prelude.Show(function (_140) {
        return "Multiplicative (" + (Prelude.show(__dict_Show_0)(_140) + ")");
    });
};
var semigroupMultiplicative = function (__dict_Semiring_1) {
    return new Prelude.Semigroup(function (_141) {
        return function (_142) {
            return Prelude["*"](__dict_Semiring_1)(_141)(_142);
        };
    });
};
var runMultiplicative = function (_129) {
    return _129;
};
var monoidMultiplicative = function (__dict_Semiring_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(__dict_Semiring_3);
    }, Prelude.one(__dict_Semiring_3));
};
var functorMultiplicative = new Prelude.Functor(function (f) {
    return function (_136) {
        return f(_136);
    };
});
var extendAdditive = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorMultiplicative;
});
var eqMultiplicative = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_132) {
        return function (_133) {
            return Prelude["/="](__dict_Eq_4)(_132)(_133);
        };
    }, function (_130) {
        return function (_131) {
            return Prelude["=="](__dict_Eq_4)(_130)(_131);
        };
    });
};
var ordMultiplicative = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMultiplicative(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_134) {
        return function (_135) {
            return Prelude.compare(__dict_Ord_2)(_134)(_135);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runMultiplicative);
var applyMultiplicative = new Prelude.Apply(function (_137) {
    return function (_138) {
        return _137(_138);
    };
}, function () {
    return functorMultiplicative;
});
var bindMultiplicative = new Prelude.Bind(function (_139) {
    return function (f) {
        return f(_139);
    };
}, function () {
    return applyMultiplicative;
});
var applicativeMultiplicative = new Prelude.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Prelude.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative, 
    runMultiplicative: runMultiplicative, 
    eqMultiplicative: eqMultiplicative, 
    ordMultiplicative: ordMultiplicative, 
    functorMultiplicative: functorMultiplicative, 
    applyMultiplicative: applyMultiplicative, 
    applicativeMultiplicative: applicativeMultiplicative, 
    bindMultiplicative: bindMultiplicative, 
    monadMultiplicative: monadMultiplicative, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showMultiplicative: showMultiplicative, 
    semigroupMultiplicative: semigroupMultiplicative, 
    monoidMultiplicative: monoidMultiplicative
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":20,"Prelude":27}],20:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidMaybe = function (__dict_Semigroup_0) {
    return new Monoid(function () {
        return Data_Maybe.semigroupMaybe(__dict_Semigroup_0);
    }, Data_Maybe.Nothing.value);
};
var monoidArray = new Monoid(function () {
    return Data_Array.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidArr = function (__dict_Monoid_1) {
    return new Monoid(function () {
        return Prelude.semigroupArr(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(__dict_Monoid_1)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidString: monoidString, 
    monoidArray: monoidArray, 
    monoidUnit: monoidUnit, 
    monoidArr: monoidArr, 
    monoidMaybe: monoidMaybe
};

},{"Data.Array":10,"Data.Maybe":14,"Prelude":27}],21:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var Data_Array = require("Data.Array");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var zip = Data_Array.zipWith(Tuple.create);
var unzip = function (_152) {
    if (_152.length >= 1) {
        var _501 = _152.slice(1);
        var _495 = unzip(_501);
        return new Tuple(Prelude[":"]((_152[0]).value0)(_495.value0), Prelude[":"]((_152[0]).value1)(_495.value1));
    };
    if (_152.length === 0) {
        return new Tuple([  ], [  ]);
    };
    throw new Error("Failed pattern match");
};
var uncurry = function (f) {
    return function (_151) {
        return f(_151.value0)(_151.value1);
    };
};
var swap = function (_153) {
    return new Tuple(_153.value1, _153.value0);
};
var snd = function (_150) {
    return _150.value1;
};
var showTuple = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_154) {
            return "Tuple (" + (Prelude.show(__dict_Show_0)(_154.value0) + (") (" + (Prelude.show(__dict_Show_1)(_154.value1) + ")")));
        });
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_159) {
    return function (_160) {
        return new Tuple(_160.value0, _159.value1);
    };
});
var semigroupTuple = function (__dict_Semigroup_2) {
    return function (__dict_Semigroup_3) {
        return new Prelude.Semigroup(function (_161) {
            return function (_162) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_2)(_161.value0)(_162.value0), Prelude["<>"](__dict_Semigroup_3)(_161.value1)(_162.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_6) {
    return function (__dict_Monoid_7) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_6), Data_Monoid.mempty(__dict_Monoid_7)));
    };
};
var functorTuple = new Prelude.Functor(function (f) {
    return function (_163) {
        return new Tuple(_163.value0, f(_163.value1));
    };
});
var fst = function (_149) {
    return _149.value0;
};
var lazyLazy1Tuple = function (__dict_Lazy1_9) {
    return function (__dict_Lazy1_10) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer1(__dict_Lazy1_9)(function (_145) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer1(__dict_Lazy1_10)(function (_146) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyLazy2Tuple = function (__dict_Lazy2_11) {
    return function (__dict_Lazy2_12) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer2(__dict_Lazy2_11)(function (_147) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer2(__dict_Lazy2_12)(function (_148) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyTuple = function (__dict_Lazy_13) {
    return function (__dict_Lazy_14) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_13)(function (_143) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_14)(function (_144) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var extendTuple = new Control_Extend.Extend(function (f) {
    return function (_167) {
        return new Tuple(_167.value0, f(_167));
    };
}, function () {
    return functorTuple;
});
var eqTuple = function (__dict_Eq_15) {
    return function (__dict_Eq_16) {
        return new Prelude.Eq(function (t1) {
            return function (t2) {
                return !Prelude["=="](eqTuple(__dict_Eq_15)(__dict_Eq_16))(t1)(t2);
            };
        }, function (_155) {
            return function (_156) {
                return Prelude["=="](__dict_Eq_15)(_155.value0)(_156.value0) && Prelude["=="](__dict_Eq_16)(_155.value1)(_156.value1);
            };
        });
    };
};
var ordTuple = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (_157) {
            return function (_158) {
                var _552 = Prelude.compare(__dict_Ord_4)(_157.value0)(_158.value0);
                if (_552 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_5)(_157.value1)(_158.value1);
                };
                return _552;
            };
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var applyTuple = function (__dict_Semigroup_18) {
    return new Prelude.Apply(function (_164) {
        return function (_165) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_18)(_164.value0)(_165.value0), _164.value1(_165.value1));
        };
    }, function () {
        return functorTuple;
    });
};
var bindTuple = function (__dict_Semigroup_17) {
    return new Prelude.Bind(function (_166) {
        return function (f) {
            var _565 = f(_166.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_17)(_166.value0)(_565.value0), _565.value1);
        };
    }, function () {
        return applyTuple(__dict_Semigroup_17);
    });
};
var applicativeTuple = function (__dict_Monoid_19) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_19)));
};
var monadTuple = function (__dict_Monoid_8) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_8);
    }, function () {
        return bindTuple(__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    swap: swap, 
    unzip: unzip, 
    zip: zip, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    functorTuple: functorTuple, 
    applyTuple: applyTuple, 
    applicativeTuple: applicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    lazyLazy1Tuple: lazyLazy1Tuple, 
    lazyLazy2Tuple: lazyLazy2Tuple
};

},{"Control.Comonad":4,"Control.Extend":5,"Control.Lazy":6,"Data.Array":10,"Data.Monoid":20,"Prelude":27}],22:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");

    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
var print = function (__dict_Show_0) {
    return function (o) {
        return trace(Prelude.show(__dict_Show_0)(o));
    };
};
module.exports = {
    print: print, 
    trace: trace
};

},{"Control.Monad.Eff":7,"Prelude":27}],23:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Function = require("Data.Function");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_Eff = require("Control.Monad.Eff");
function getCanvasElementByIdImpl(id, Just, Nothing) {
    return function() {
      var el = document.getElementById(id);
      if (el && el instanceof HTMLCanvasElement) {
        return Just(el);
      } else {
        return Nothing;
      }
    };
  };
function getContext2D(c) {  return function() {    return c.getContext('2d');  };};
function getCanvasWidth(canvas){  return function(){    return canvas.width;  };};;
function getCanvasHeight(canvas){  return function(){    return canvas.height;  };};;
function setCanvasWidth(width){   return function(canvas){      return function(){        canvas.width = width;        return canvas;      };    };};;
function setCanvasHeight(height){   return function(canvas){      return function(){         canvas.height = height;         return canvas;       };    };};;
function canvasToDataURL(canvas) {   return function(){     return canvas.toDataURL();   };};;
function setLineWidth(width) {  return function(ctx) {    return function() {      ctx.lineWidth = width;      return ctx;    };  };};
function setFillStyle(style) {  return function(ctx) {    return function() {      ctx.fillStyle = style;      return ctx;    };  };};
function setStrokeStyle(style) {  return function(ctx) {    return function() {      ctx.strokeStyle = style;      return ctx;    };  };};
function setShadowColor(color) {  return function(ctx) {    return function() {      ctx.shadowColor = color;      return ctx;    };  };};
function setShadowBlur(blur) {  return function(ctx) {    return function() {      ctx.shadowBlur = blur;      return ctx;    };  };};
function setShadowOffsetX(offsetX) {  return function(ctx) {    return function() {      ctx.shadowOffsetX = offsetX;      return ctx;    };  };};
function setShadowOffsetY(offsetY) {  return function(ctx) {    return function() {      ctx.shadowOffsetY = offsetY;      return ctx;    };  };};
function setLineCapImpl(cap){  return function(ctx) {    return function() {      ctx.lineCap = cap;      return ctx;    };  };};
function setGlobalCompositeOperationImpl(ctx) {  return function(op) {    return function() {      ctx.globalCompositeOperation = op;      return ctx;    };  };};
function setGlobalAlpha(ctx) {  return function(alpha) {    return function() {      ctx.setGlobalAlpha = alpha;      return ctx;    };  };};
function beginPath(ctx) {  return function() {    ctx.beginPath();    return ctx;  };};
function stroke(ctx) {  return function() {    ctx.stroke();    return ctx;  };};
function fill(ctx) {  return function() {    ctx.fill();    return ctx;  };};
function clip(ctx) {  return function() {    ctx.clip();    return ctx;  };};
function lineTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.lineTo(x, y);        return ctx;      };    };  };};
function moveTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.moveTo(x, y);        return ctx;      };    };  };};
function closePath(ctx) {  return function() {    ctx.closePath();    return ctx;  };};
function arc(ctx) {  return function(a) {    return function() {      ctx.arc(a.x, a.y, a.r, a.start, a.end);      return ctx;    };  };};
function rect(ctx) {  return function(r) {    return function() {      ctx.rect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
function fillRect(ctx) {  return function(r) {    return function() {      ctx.fillRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
function strokeRect(ctx) {  return function(r) {    return function() {      ctx.strokeRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
function clearRect(ctx) {  return function(r) {    return function() {      ctx.clearRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
function scale(t) {  return function(ctx) {    return function() {      ctx.scale(t.scaleX, t.scaleY);      return ctx;    };  };};
function rotate(angle) {  return function(ctx) {    return function() {      ctx.rotate(angle);      return ctx;    };  };};
function translate(t) {  return function(ctx) {    return function() {      ctx.translate(t.translateX, t.translateY);      return ctx;    };  };};
function transform(t) {  return function(ctx) {    return function() {      ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);      return ctx;    };  };};
function textAlign(ctx) {
      return function() {
        return unsafeParseTextAlign(ctx.textAlign);
      }
  };
function setTextAlignImpl(ctx) {
    return function(textAlign) {
      return function() {
        ctx.textAlign = textAlign;
        return ctx;
      }
    }
  };
function font(ctx) {  return function() {    return ctx.font;  };};
function setFont(fontspec) {  return function(ctx) {    return function() {      ctx.font = fontspec;      return ctx;    };  };};
function fillText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.fillText(text, x, y);          return ctx;        };      };    };  };};
function strokeText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.strokeText(text, x, y);          return ctx;        };      };    };  };};
function measureText(ctx) {  return function(text) {    return function() {      return ctx.measureText(text);    };  };};
function save(ctx) {  return function() {    ctx.save();    return ctx;  };};
function restore(ctx) {  return function() {    ctx.restore();    return ctx;  };};
function getImageData(ctx) {  return function(x) {    return function(y) {      return function(w) {        return function(h) {          return function() { return ctx.getImageData(x, y, w, h); };        };      };    };  };};
function putImageDataFull(ctx) {  return function(image_data) {    return function(x) {      return function(y) {        return function(dx) {          return function(dy) {            return function(dw) {              return function(dh) {                return function() {                  ctx.putImageData(image_data, x, y, dx, dy, dw, dh);                  return ctx;                };              };            };          };        };      };    };  };};
function putImageData(ctx) {  return function(image_data) {    return function(x) {      return function(y) {        return function() {          ctx.putImageData(image_data, x, y);          return ctx;        };      };    };  };};
function createImageData(ctx) {  return function(sw) {    return function(sh) {      return function() {        return ctx.createImageData(sw, sh);      };    };  };};
function createImageDataCopy(ctx) {  return function(image_data) {    return function() {      return ctx.createImageData(image_data);    };  };};
function getImageDataWidth(image_data) {  return function() {    return image_data.width;  };};
function getImageDataHeight(image_data) {  return function() {    return image_data.height;  };};
function getImageDataPixelArray(image_data) {  return function() {    return image_data.data;  };};
var AlignLeft = (function () {
    function AlignLeft() {

    };
    AlignLeft.value = new AlignLeft();
    return AlignLeft;
})();
var AlignRight = (function () {
    function AlignRight() {

    };
    AlignRight.value = new AlignRight();
    return AlignRight;
})();
var AlignCenter = (function () {
    function AlignCenter() {

    };
    AlignCenter.value = new AlignCenter();
    return AlignCenter;
})();
var AlignStart = (function () {
    function AlignStart() {

    };
    AlignStart.value = new AlignStart();
    return AlignStart;
})();
var AlignEnd = (function () {
    function AlignEnd() {

    };
    AlignEnd.value = new AlignEnd();
    return AlignEnd;
})();
var Round = (function () {
    function Round() {

    };
    Round.value = new Round();
    return Round;
})();
var Square = (function () {
    function Square() {

    };
    Square.value = new Square();
    return Square;
})();
var Butt = (function () {
    function Butt() {

    };
    Butt.value = new Butt();
    return Butt;
})();
var SourceOver = (function () {
    function SourceOver() {

    };
    SourceOver.value = new SourceOver();
    return SourceOver;
})();
var SourceIn = (function () {
    function SourceIn() {

    };
    SourceIn.value = new SourceIn();
    return SourceIn;
})();
var SourceOut = (function () {
    function SourceOut() {

    };
    SourceOut.value = new SourceOut();
    return SourceOut;
})();
var SourceAtop = (function () {
    function SourceAtop() {

    };
    SourceAtop.value = new SourceAtop();
    return SourceAtop;
})();
var DestinationOver = (function () {
    function DestinationOver() {

    };
    DestinationOver.value = new DestinationOver();
    return DestinationOver;
})();
var DestinationIn = (function () {
    function DestinationIn() {

    };
    DestinationIn.value = new DestinationIn();
    return DestinationIn;
})();
var DestinationOut = (function () {
    function DestinationOut() {

    };
    DestinationOut.value = new DestinationOut();
    return DestinationOut;
})();
var DestinationAtop = (function () {
    function DestinationAtop() {

    };
    DestinationAtop.value = new DestinationAtop();
    return DestinationAtop;
})();
var Lighter = (function () {
    function Lighter() {

    };
    Lighter.value = new Lighter();
    return Lighter;
})();
var Copy = (function () {
    function Copy() {

    };
    Copy.value = new Copy();
    return Copy;
})();
var Xor = (function () {
    function Xor() {

    };
    Xor.value = new Xor();
    return Xor;
})();
var withContext = function (ctx) {
    return function (action) {
        return function __do() {
            save(ctx)();
            var _4 = action();
            restore(ctx)();
            return _4;
        };
    };
};
var unsafeParseTextAlign = function (_8) {
    if (_8 === "left") {
        return AlignLeft.value;
    };
    if (_8 === "right") {
        return AlignRight.value;
    };
    if (_8 === "center") {
        return AlignCenter.value;
    };
    if (_8 === "start") {
        return AlignStart.value;
    };
    if (_8 === "end") {
        return AlignEnd.value;
    };
    throw new Error("Failed pattern match");
};
var strokePath = function (ctx) {
    return function (path) {
        return function __do() {
            beginPath(ctx)();
            var _2 = path();
            stroke(ctx)();
            return _2;
        };
    };
};
var showTextAlign = new Prelude.Show(function (_10) {
    if (_10 instanceof AlignLeft) {
        return "left";
    };
    if (_10 instanceof AlignRight) {
        return "right";
    };
    if (_10 instanceof AlignCenter) {
        return "center";
    };
    if (_10 instanceof AlignStart) {
        return "start";
    };
    if (_10 instanceof AlignEnd) {
        return "end";
    };
    throw new Error("Failed pattern match");
});
var showComposite = new Prelude.Show(function (_9) {
    if (_9 instanceof SourceOver) {
        return "source-over";
    };
    if (_9 instanceof SourceIn) {
        return "source-in";
    };
    if (_9 instanceof SourceOut) {
        return "source-out";
    };
    if (_9 instanceof SourceAtop) {
        return "source-atop";
    };
    if (_9 instanceof DestinationOver) {
        return "destination-over";
    };
    if (_9 instanceof DestinationIn) {
        return "destination-in";
    };
    if (_9 instanceof DestinationOut) {
        return "destination-out";
    };
    if (_9 instanceof DestinationAtop) {
        return "destination-atop";
    };
    if (_9 instanceof Lighter) {
        return "lighter";
    };
    if (_9 instanceof Copy) {
        return "copy";
    };
    if (_9 instanceof Xor) {
        return "xor";
    };
    throw new Error("Failed pattern match");
});
var setTextAlign = function (ctx) {
    return function (textAlign) {
        return setTextAlignImpl(ctx)(Prelude.show(showTextAlign)(textAlign));
    };
};
var setLineCap = function (_7) {
    if (_7 instanceof Round) {
        return setLineCapImpl("round");
    };
    if (_7 instanceof Square) {
        return setLineCapImpl("square");
    };
    if (_7 instanceof Butt) {
        return setLineCapImpl("butt");
    };
    throw new Error("Failed pattern match");
};
var setGlobalCompositeOperation = function (ctx) {
    return function (composite) {
        return setGlobalCompositeOperationImpl(ctx)(Prelude.show(showComposite)(composite));
    };
};
var setCanvasDimensions = function (d) {
    return function (ce) {
        return Prelude[">>="](Control_Monad_Eff.bindEff)(setCanvasHeight(d.height)(ce))(setCanvasWidth(d.width));
    };
};
var getCanvasElementById = function (elId) {
    return getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
};
var getCanvasDimensions = function (ce) {
    return function __do() {
        var _1 = getCanvasWidth(ce)();
        var _0 = getCanvasHeight(ce)();
        return {
            width: _1, 
            height: _0
        };
    };
};
var fillPath = function (ctx) {
    return function (path) {
        return function __do() {
            beginPath(ctx)();
            var _3 = path();
            fill(ctx)();
            return _3;
        };
    };
};
module.exports = {
    AlignLeft: AlignLeft, 
    AlignRight: AlignRight, 
    AlignCenter: AlignCenter, 
    AlignStart: AlignStart, 
    AlignEnd: AlignEnd, 
    Round: Round, 
    Square: Square, 
    Butt: Butt, 
    SourceOver: SourceOver, 
    SourceIn: SourceIn, 
    SourceOut: SourceOut, 
    SourceAtop: SourceAtop, 
    DestinationOver: DestinationOver, 
    DestinationIn: DestinationIn, 
    DestinationOut: DestinationOut, 
    DestinationAtop: DestinationAtop, 
    Lighter: Lighter, 
    Copy: Copy, 
    Xor: Xor, 
    createImageDataCopy: createImageDataCopy, 
    createImageData: createImageData, 
    putImageDataFull: putImageDataFull, 
    putImageData: putImageData, 
    getImageDataPixelArray: getImageDataPixelArray, 
    getImageDataHeight: getImageDataHeight, 
    getImageDataWidth: getImageDataWidth, 
    getImageData: getImageData, 
    withContext: withContext, 
    restore: restore, 
    save: save, 
    measureText: measureText, 
    strokeText: strokeText, 
    fillText: fillText, 
    setFont: setFont, 
    font: font, 
    setTextAlign: setTextAlign, 
    textAlign: textAlign, 
    transform: transform, 
    translate: translate, 
    rotate: rotate, 
    scale: scale, 
    clearRect: clearRect, 
    strokeRect: strokeRect, 
    fillRect: fillRect, 
    rect: rect, 
    arc: arc, 
    fillPath: fillPath, 
    strokePath: strokePath, 
    closePath: closePath, 
    moveTo: moveTo, 
    lineTo: lineTo, 
    clip: clip, 
    fill: fill, 
    stroke: stroke, 
    beginPath: beginPath, 
    setGlobalAlpha: setGlobalAlpha, 
    setGlobalCompositeOperation: setGlobalCompositeOperation, 
    setLineCap: setLineCap, 
    setShadowColor: setShadowColor, 
    setShadowOffsetY: setShadowOffsetY, 
    setShadowOffsetX: setShadowOffsetX, 
    setShadowBlur: setShadowBlur, 
    setStrokeStyle: setStrokeStyle, 
    setFillStyle: setFillStyle, 
    setLineWidth: setLineWidth, 
    canvasToDataURL: canvasToDataURL, 
    setCanvasDimensions: setCanvasDimensions, 
    getCanvasDimensions: getCanvasDimensions, 
    setCanvasHeight: setCanvasHeight, 
    getCanvasHeight: getCanvasHeight, 
    setCanvasWidth: setCanvasWidth, 
    getCanvasWidth: getCanvasWidth, 
    getContext2D: getContext2D, 
    getCanvasElementById: getCanvasElementById, 
    showComposite: showComposite, 
    showTextAlign: showTextAlign
};

},{"Control.Monad.Eff":7,"Data.Function":13,"Data.Maybe":14,"Prelude":27}],24:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Debug_Trace = require("Debug.Trace");
var Graphics_Canvas = require("Graphics.Canvas");
var $$Math = require("Math");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Array = require("Data.Array");
var Front = (function () {
    function Front() {

    };
    Front.value = new Front();
    return Front;
})();
var Back = (function () {
    function Back() {

    };
    Back.value = new Back();
    return Back;
})();
var Split = (function () {
    function Split(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Split.create = function (value0) {
        return function (value1) {
            return new Split(value0, value1);
        };
    };
    return Split;
})();
var XY = (function () {
    function XY(value0) {
        this.value0 = value0;
    };
    XY.create = function (value0) {
        return new XY(value0);
    };
    return XY;
})();
var YZ = (function () {
    function YZ(value0) {
        this.value0 = value0;
    };
    YZ.create = function (value0) {
        return new YZ(value0);
    };
    return YZ;
})();
var ZX = (function () {
    function ZX(value0) {
        this.value0 = value0;
    };
    ZX.create = function (value0) {
        return new ZX(value0);
    };
    return ZX;
})();
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();
var Branch = (function () {
    function Branch(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Branch.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Branch(value0, value1, value2);
            };
        };
    };
    return Branch;
})();
var view = function (render) {
    var go = function (_8) {
        if (_8 instanceof Leaf) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        };
        if (_8 instanceof Branch && _8.value1 instanceof XY) {
            return function __do() {
                go(_8.value2)();
                render(_8.value1)();
                return go(_8.value0)();
            };
        };
        if (_8 instanceof Branch && _8.value1 instanceof YZ) {
            return function __do() {
                go(_8.value2)();
                render(_8.value1)();
                return go(_8.value0)();
            };
        };
        if (_8 instanceof Branch && _8.value1 instanceof ZX) {
            return function __do() {
                go(_8.value2)();
                render(_8.value1)();
                return go(_8.value0)();
            };
        };
        throw new Error("Failed pattern match");
    };
    return go;
};
var toPoints = function (_2) {
    if (_2 instanceof XY) {
        return [ {
            x: _2.value0.x.min, 
            y: _2.value0.y.min, 
            z: _2.value0.z
        }, {
            x: _2.value0.x.min, 
            y: _2.value0.y.max, 
            z: _2.value0.z
        }, {
            x: _2.value0.x.max, 
            y: _2.value0.y.max, 
            z: _2.value0.z
        }, {
            x: _2.value0.x.max, 
            y: _2.value0.y.min, 
            z: _2.value0.z
        } ];
    };
    if (_2 instanceof YZ) {
        return [ {
            x: _2.value0.x, 
            y: _2.value0.y.min, 
            z: _2.value0.z.min
        }, {
            x: _2.value0.x, 
            y: _2.value0.y.min, 
            z: _2.value0.z.max
        }, {
            x: _2.value0.x, 
            y: _2.value0.y.max, 
            z: _2.value0.z.max
        }, {
            x: _2.value0.x, 
            y: _2.value0.y.max, 
            z: _2.value0.z.min
        } ];
    };
    if (_2 instanceof ZX) {
        return [ {
            x: _2.value0.x.min, 
            y: _2.value0.y, 
            z: _2.value0.z.min
        }, {
            x: _2.value0.x.min, 
            y: _2.value0.y, 
            z: _2.value0.z.max
        }, {
            x: _2.value0.x.max, 
            y: _2.value0.y, 
            z: _2.value0.z.max
        }, {
            x: _2.value0.x.max, 
            y: _2.value0.y, 
            z: _2.value0.z.min
        } ];
    };
    throw new Error("Failed pattern match");
};
var showR = new Prelude.Show(function (_3) {
    if (_3 instanceof XY) {
        return "(XY [" + (Prelude.show(Prelude.showNumber)(_3.value0.x.min) + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.x.max) + ("]" + (", [" + (Prelude.show(Prelude.showNumber)(_3.value0.y.min) + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.y.max) + ("]" + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.z) + ")")))))))))));
    };
    if (_3 instanceof YZ) {
        return "(YZ " + (Prelude.show(Prelude.showNumber)(_3.value0.x) + (", [" + (Prelude.show(Prelude.showNumber)(_3.value0.y.min) + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.y.max) + ("]" + (", [" + (Prelude.show(Prelude.showNumber)(_3.value0.z.min) + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.z.max) + "])"))))))))));
    };
    if (_3 instanceof ZX) {
        return "(ZX [" + (Prelude.show(Prelude.showNumber)(_3.value0.x.min) + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.x.max) + ("]" + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.y) + (", [" + (Prelude.show(Prelude.showNumber)(_3.value0.z.min) + (", " + (Prelude.show(Prelude.showNumber)(_3.value0.z.max) + "])"))))))))));
    };
    throw new Error("Failed pattern match");
});
var functorSplit = new Prelude.Functor(function (f) {
    return function (_4) {
        if (_4 instanceof Front) {
            return Front.value;
        };
        if (_4 instanceof Back) {
            return Back.value;
        };
        if (_4 instanceof Split) {
            return new Split(f(_4.value0), f(_4.value1));
        };
        throw new Error("Failed pattern match");
    };
});
var cube = function (x0) {
    return function (x1) {
        return function (y0) {
            return function (y1) {
                return function (z0) {
                    return function (z1) {
                        return [ new XY({
                            x: {
                                min: x0, 
                                max: x1
                            }, 
                            y: {
                                min: y0, 
                                max: y1
                            }, 
                            z: z0
                        }), new XY({
                            x: {
                                min: x0, 
                                max: x1
                            }, 
                            y: {
                                min: y0, 
                                max: y1
                            }, 
                            z: z1
                        }), new YZ({
                            x: x0, 
                            y: {
                                min: y0, 
                                max: y1
                            }, 
                            z: {
                                min: z0, 
                                max: z1
                            }
                        }), new YZ({
                            x: x1, 
                            y: {
                                min: y0, 
                                max: y1
                            }, 
                            z: {
                                min: z0, 
                                max: z1
                            }
                        }), new ZX({
                            x: {
                                min: x0, 
                                max: x1
                            }, 
                            y: y0, 
                            z: {
                                min: z0, 
                                max: z1
                            }
                        }), new ZX({
                            x: {
                                min: x0, 
                                max: x1
                            }, 
                            y: y1, 
                            z: {
                                min: z0, 
                                max: z1
                            }
                        }) ];
                    };
                };
            };
        };
    };
};
var scene = Prelude["++"](Data_Array.semigroupArray)(cube(10)(90)(10)(90)(0)(120))(Prelude["++"](Data_Array.semigroupArray)(cube(10)(90)(60)(180)(30)(120))(Prelude["++"](Data_Array.semigroupArray)(cube(60)(180)(100)(180)(60)(120))(cube(100)(180)(10)(120)(90)(120))));
var buildTree = (function () {
    var splitZ = function (o) {
        return function (z) {
            if (o.z.min >= z) {
                return Back.value;
            };
            if (o.z.max <= z) {
                return Front.value;
            };
            if (Prelude.otherwise) {
                return new Split((function () {
                    var _36 = {};
                    for (var _37 in o) {
                        if (o.hasOwnProperty(_37)) {
                            _36[_37] = o[_37];
                        };
                    };
                    _36.z = {
                        min: o.z.min, 
                        max: z
                    };
                    return _36;
                })(), (function () {
                    var _38 = {};
                    for (var _39 in o) {
                        if (o.hasOwnProperty(_39)) {
                            _38[_39] = o[_39];
                        };
                    };
                    _38.z = {
                        max: o.z.max, 
                        min: z
                    };
                    return _38;
                })());
            };
            throw new Error("Failed pattern match");
        };
    };
    var splitY = function (o) {
        return function (y) {
            if (o.y.min >= y) {
                return Front.value;
            };
            if (o.y.max <= y) {
                return Back.value;
            };
            if (Prelude.otherwise) {
                return new Split((function () {
                    var _42 = {};
                    for (var _43 in o) {
                        if (o.hasOwnProperty(_43)) {
                            _42[_43] = o[_43];
                        };
                    };
                    _42.y = {
                        max: o.y.max, 
                        min: y
                    };
                    return _42;
                })(), (function () {
                    var _44 = {};
                    for (var _45 in o) {
                        if (o.hasOwnProperty(_45)) {
                            _44[_45] = o[_45];
                        };
                    };
                    _44.y = {
                        min: o.y.min, 
                        max: y
                    };
                    return _44;
                })());
            };
            throw new Error("Failed pattern match");
        };
    };
    var splitX = function (o) {
        return function (x) {
            if (o.x.min >= x) {
                return Front.value;
            };
            if (o.x.max <= x) {
                return Back.value;
            };
            if (Prelude.otherwise) {
                return new Split((function () {
                    var _48 = {};
                    for (var _49 in o) {
                        if (o.hasOwnProperty(_49)) {
                            _48[_49] = o[_49];
                        };
                    };
                    _48.x = {
                        max: o.x.max, 
                        min: x
                    };
                    return _48;
                })(), (function () {
                    var _50 = {};
                    for (var _51 in o) {
                        if (o.hasOwnProperty(_51)) {
                            _50[_51] = o[_51];
                        };
                    };
                    _50.x = {
                        min: o.x.min, 
                        max: x
                    };
                    return _50;
                })());
            };
            throw new Error("Failed pattern match");
        };
    };
    var splitOn = function (_6) {
        return function (_7) {
            if (_6 instanceof XY && _7 instanceof XY) {
                if (_6.value0.z >= _7.value0.z) {
                    return Back.value;
                };
                if (Prelude.otherwise) {
                    return Front.value;
                };
            };
            if (_6 instanceof XY && _7 instanceof YZ) {
                return Prelude["<$>"](functorSplit)(XY.create)(splitX(_6.value0)(_7.value0.x));
            };
            if (_6 instanceof XY && _7 instanceof ZX) {
                return Prelude["<$>"](functorSplit)(XY.create)(splitY(_6.value0)(_7.value0.y));
            };
            if (_6 instanceof YZ && _7 instanceof XY) {
                return Prelude["<$>"](functorSplit)(YZ.create)(splitZ(_6.value0)(_7.value0.z));
            };
            if (_6 instanceof YZ && _7 instanceof YZ) {
                if (_6.value0.x >= _7.value0.x) {
                    return Front.value;
                };
                if (Prelude.otherwise) {
                    return Back.value;
                };
            };
            if (_6 instanceof YZ && _7 instanceof ZX) {
                return Prelude["<$>"](functorSplit)(YZ.create)(splitY(_6.value0)(_7.value0.y));
            };
            if (_6 instanceof ZX && _7 instanceof XY) {
                return Prelude["<$>"](functorSplit)(ZX.create)(splitZ(_6.value0)(_7.value0.z));
            };
            if (_6 instanceof ZX && _7 instanceof YZ) {
                return Prelude["<$>"](functorSplit)(ZX.create)(splitX(_6.value0)(_7.value0.x));
            };
            if (_6 instanceof ZX && _7 instanceof ZX) {
                if (_6.value0.y >= _7.value0.y) {
                    return Front.value;
                };
                if (Prelude.otherwise) {
                    return Back.value;
                };
            };
            throw new Error("Failed pattern match");
        };
    };
    var pushDown = function (_5) {
        return function (r) {
            if (_5 instanceof Leaf) {
                return new Branch(Leaf.value, r, Leaf.value);
            };
            if (_5 instanceof Branch) {
                var _74 = splitOn(r)(_5.value1);
                if (_74 instanceof Front) {
                    return new Branch(pushDown(_5.value0)(r), _5.value1, _5.value2);
                };
                if (_74 instanceof Back) {
                    return new Branch(_5.value0, _5.value1, pushDown(_5.value2)(r));
                };
                if (_74 instanceof Split) {
                    return new Branch(pushDown(_5.value0)(_74.value0), _5.value1, pushDown(_5.value2)(_74.value1));
                };
                throw new Error("Failed pattern match");
            };
            throw new Error("Failed pattern match");
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(pushDown)(Leaf.value);
})();
var main = (function () {
    var sin20 = $$Math.sin($$Math.pi / 4);
    var cos20 = $$Math.cos($$Math.pi / 4);
    var project = function (o) {
        return {
            x: (300.0 + o.x * cos20) - o.y * sin20, 
            y: 100.0 + o.x * sin20 + o.y * cos20 + o.z
        };
    };
    var l2 = function (ctx) {
        return function (f) {
            return function (p) {
                var _80 = project(p);
                return f(ctx)(_80.x)(_80.y);
            };
        };
    };
    var render = function (ctx) {
        return function (r) {
            return function __do() {
                Debug_Trace.print(showR)(r)();
                var _81 = toPoints(r);
                if (_81.length === 4) {
                    return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                        Graphics_Canvas.beginPath(ctx)();
                        l2(ctx)(Graphics_Canvas.moveTo)(_81[0])();
                        l2(ctx)(Graphics_Canvas.lineTo)(_81[1])();
                        l2(ctx)(Graphics_Canvas.lineTo)(_81[2])();
                        l2(ctx)(Graphics_Canvas.lineTo)(_81[3])();
                        Graphics_Canvas.closePath(ctx)();
                        Graphics_Canvas.fill(ctx)();
                        return Graphics_Canvas.stroke(ctx)();
                    })();
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return function __do() {
        var _1 = Graphics_Canvas.getCanvasElementById("canvas")();
        if (_1 instanceof Data_Maybe.Just) {
            var _0 = Graphics_Canvas.getContext2D(_1.value0)();
            Graphics_Canvas.setFillStyle("rgba(48, 196, 255, 0.75)")(_0)();
            Graphics_Canvas.setStrokeStyle("rgba(0, 0, 0, 0.2)")(_0)();
            var bsp = buildTree(scene);
            return view(render(_0))(bsp)();
        };
        throw new Error("Failed pattern match");
    };
})();
module.exports = {
    Front: Front, 
    Back: Back, 
    Split: Split, 
    Leaf: Leaf, 
    Branch: Branch, 
    XY: XY, 
    YZ: YZ, 
    ZX: ZX, 
    main: main, 
    scene: scene, 
    cube: cube, 
    toPoints: toPoints, 
    view: view, 
    buildTree: buildTree, 
    showR: showR, 
    functorSplit: functorSplit
};

},{"Control.Monad.Eff":7,"Data.Array":10,"Data.Foldable":12,"Data.Maybe":14,"Data.Tuple":21,"Debug.Trace":22,"Graphics.Canvas":23,"Math":25,"Prelude":27}],25:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var abs = Math.abs;;
var acos = Math.acos;;
var asin = Math.asin;;
var atan = Math.atan;;
function atan2(y){  return function (x) {    return Math.atan2(y, x);  };};
var ceil = Math.ceil;;
var cos = Math.cos;;
var exp = Math.exp;;
var floor = Math.floor;;
var log = Math.log;;
function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
function pow(n){  return function(p) {    return Math.pow(n, p);  }};
var round = Math.round;;
var sin = Math.sin;;
var sqrt = Math.sqrt;;
var tan = Math.tan;;
var e       = Math.E;;
var ln2     = Math.LN2;;
var ln10    = Math.LN10;;
var log2e   = Math.LOG2E;;
var log10e  = Math.LOG10E;;
var pi      = Math.PI;;
var sqrt1_2 = Math.SQRT1_2;;
var sqrt2   = Math.SQRT2;;
module.exports = {
    sqrt2: sqrt2, 
    sqrt1_2: sqrt1_2, 
    pi: pi, 
    log10e: log10e, 
    log2e: log2e, 
    ln10: ln10, 
    ln2: ln2, 
    e: e, 
    tan: tan, 
    sqrt: sqrt, 
    sin: sin, 
    round: round, 
    pow: pow, 
    min: min, 
    max: max, 
    log: log, 
    floor: floor, 
    exp: exp, 
    cos: cos, 
    ceil: ceil, 
    atan2: atan2, 
    atan: atan, 
    asin: asin, 
    acos: acos, 
    abs: abs
};

},{"Prelude":27}],26:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
module.exports = {
    unsafeIndex: unsafeIndex
};

},{"Prelude":27}],27:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";

    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;

    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;

    function showNumberImpl(n) {
      return n.toString();
    }
    ;

    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;

    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;

    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;

    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;

    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;

    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;

    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;

    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;

    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;

    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;

    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;

    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;

    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;

    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;

    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;

    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;

    function numComplement(n) {
      return ~n;
    }
    ;

    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;

    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;

    function boolNot(b) {
      return !b;
    }
    ;

    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
var Unit = function (x) {
    return x;
};
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var Semigroupoid = function ($less$less$less) {
    this["<<<"] = $less$less$less;
};
var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
var Show = function (show) {
    this.show = show;
};
var Functor = function ($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
var Semiring = function ($times, $plus, one, zero) {
    this["*"] = $times;
    this["+"] = $plus;
    this.one = one;
    this.zero = zero;
};
var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
    this["/"] = $div;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.mod = mod;
};
var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
    this["-"] = $minus;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
};
var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
};
var Num = function (__superclass_Prelude$dotDivisionRing_0) {
    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
};
var Eq = function ($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
var Ord = function (__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};
var BoolLike = function ($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
var Semigroup = function ($less$greater) {
    this["<>"] = $less$greater;
};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};
var $dot$up$dot = function (dict) {
    return dict[".^."];
};
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = numMod;
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var zero = function (dict) {
    return dict.zero;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_9) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_19) {
    if (_19 instanceof LT) {
        return "LT";
    };
    if (_19 instanceof GT) {
        return "GT";
    };
    if (_19 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_10) {
    if (_10) {
        return "true";
    };
    if (!_10) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};
var shl = function (dict) {
    return dict.shl;
};
var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_27) {
    return function (_28) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupOrdering = new Semigroup(function (_20) {
    return function (y) {
        if (_20 instanceof LT) {
            return LT.value;
        };
        if (_20 instanceof GT) {
            return GT.value;
        };
        if (_20 instanceof EQ) {
            return y;
        };
        throw new Error("Failed pattern match");
    };
});
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var ringNumber = new Ring(numSub, function () {
    return semiringNumber;
});
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};
var otherwise = true;
var one = function (dict) {
    return dict.one;
};
var not = function (dict) {
    return dict.not;
};
var negate = function (__dict_Ring_6) {
    return function (a) {
        return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
    };
};
var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
    return semiringNumber;
}, function (_11) {
    return function (_12) {
        return 0;
    };
});
var mod = function (dict) {
    return dict.mod;
};
var liftM1 = function (__dict_Monad_7) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_7)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_8) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_15) {
    return function (_16) {
        return false;
    };
}, function (_13) {
    return function (_14) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_21) {
    return function (_22) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_23) {
    return function (_24) {
        if (!_23 && !_24) {
            return EQ.value;
        };
        if (!_23 && _24) {
            return LT.value;
        };
        if (_23 && _24) {
            return EQ.value;
        };
        if (_23 && !_24) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var divisionRingNumber = new DivisionRing(function () {
    return moduloSemiringNumber;
}, function () {
    return ringNumber;
});
var numNumber = new Num(function () {
    return divisionRingNumber;
});
var $$const = function (a) {
    return function (_7) {
        return a;
    };
};
var $$void = function (__dict_Functor_10) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _269 = compare(__dict_Ord_12)(a1)(a2);
            if (_269 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _270 = compare(__dict_Ord_13)(a1)(a2);
            if (_270 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _271 = compare(__dict_Ord_14)(a1)(a2);
            if (_271 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_15) {
    return function (a1) {
        return function (a2) {
            var _272 = compare(__dict_Ord_15)(a1)(a2);
            if (_272 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_9) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_11) {
    return new Ord(function () {
        return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
    }, function (_25) {
        return function (_26) {
            if (_25.length === 0 && _26.length === 0) {
                return EQ.value;
            };
            if (_25.length === 0) {
                return LT.value;
            };
            if (_26.length === 0) {
                return GT.value;
            };
            if (_25.length >= 1) {
                var _279 = _25.slice(1);
                if (_26.length >= 1) {
                    var _277 = _26.slice(1);
                    var _275 = compare(__dict_Ord_11)(_25[0])(_26[0]);
                    if (_275 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_11))(_279)(_277);
                    };
                    return _275;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_17) {
    return function (_18) {
        if (_17 instanceof LT && _18 instanceof LT) {
            return true;
        };
        if (_17 instanceof GT && _18 instanceof GT) {
            return true;
        };
        if (_17 instanceof EQ && _18 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
var asTypeOf = function (x) {
    return function (_8) {
        return x;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_16) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_16)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    Unit: Unit, 
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Semigroup: Semigroup, 
    BoolLike: BoolLike, 
    Bits: Bits, 
    Ord: Ord, 
    Eq: Eq, 
    Num: Num, 
    DivisionRing: DivisionRing, 
    Ring: Ring, 
    ModuloSemiring: ModuloSemiring, 
    Semiring: Semiring, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Show: Show, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    unit: unit, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    not: not, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    complement: complement, 
    zshr: zshr, 
    shr: shr, 
    shl: shl, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    ".&.": $dot$amp$dot, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    negate: negate, 
    "%": $percent, 
    "-": $minus, 
    mod: mod, 
    "/": $div, 
    one: one, 
    "*": $times, 
    zero: zero, 
    "+": $plus, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    "void": $$void, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    show: show, 
    cons: cons, 
    ":": $colon, 
    "#": $hash, 
    "$": $dollar, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    otherwise: otherwise, 
    semigroupoidArr: semigroupoidArr, 
    categoryArr: categoryArr, 
    showUnit: showUnit, 
    showString: showString, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showArray: showArray, 
    functorArr: functorArr, 
    applyArr: applyArr, 
    applicativeArr: applicativeArr, 
    bindArr: bindArr, 
    monadArr: monadArr, 
    semiringNumber: semiringNumber, 
    ringNumber: ringNumber, 
    moduloSemiringNumber: moduloSemiringNumber, 
    divisionRingNumber: divisionRingNumber, 
    numNumber: numNumber, 
    eqUnit: eqUnit, 
    eqString: eqString, 
    eqNumber: eqNumber, 
    eqBoolean: eqBoolean, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    showOrdering: showOrdering, 
    semigroupOrdering: semigroupOrdering, 
    ordUnit: ordUnit, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordArray: ordArray, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    semigroupUnit: semigroupUnit, 
    semigroupString: semigroupString, 
    semigroupArr: semigroupArr
};

},{}],28:[function(require,module,exports){
require('Main').main();

},{"Main":24}]},{},[28]);
